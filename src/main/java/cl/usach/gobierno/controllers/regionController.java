package cl.usach.gobierno.controllers;

import cl.usach.gobierno.Lucene;
import cl.usach.gobierno.entities.Region;
import cl.usach.gobierno.repositories.RegionRepository;
import com.mongodb.Block;
import com.mongodb.client.FindIterable;
import com.mongodb.client.model.Filters;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import cl.usach.gobierno.MongoConnection;
import org.bson.Document;
import com.mongodb.client.MongoCollection;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;


@RestController    // This means that this class is a Controller
@RequestMapping("/regions")

public class regionController {
	
	String[] regionesNombres = {"Arica y Parinacota","Tarapacá","Antofagasta","Atacama","Coquimbo",
			"Valparaíso","Libertador General Bernardo O'Higgins","Maule","BioBío",
			"La Araucanía","Los Ríos","Los Lagos","Aysén del General","Magallanes"};//metropolitana es la ultima
	
	int[] regionesPoblacion = new int[15];
	int[] regionesPorcentaje = new int[15];

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private RegionRepository regionRepository;

    /**
     * Obtiene la informacion de todos las regiones
     * @return OK
     */
    @CrossOrigin
    @GetMapping(path="/")
    public @ResponseBody
    Iterable<Region> getAllPolitical() {
        // This returns a JSON or XML with the users
        return regionRepository.findAll();
    }

    @CrossOrigin
    @RequestMapping(method = RequestMethod.POST)
    @ResponseBody
    @Transactional
    public ResponseEntity<Region> createRegion(@RequestBody Region resource) {

    	return new ResponseEntity<>(regionRepository.save(resource), HttpStatus.CREATED);
    }
    

    /**
     * Obtiene la informacion de un politico dado su id
     * @param id
     * @return OK
     */
    @CrossOrigin
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @ResponseBody
    public ResponseEntity<Region> findOne(@PathVariable("id") Integer id){
        Region political = regionRepository.findById(id);

        if (political == null){
            return new ResponseEntity<>(political, HttpStatus.NOT_FOUND);
        }else{
            return new ResponseEntity<>(political, HttpStatus.OK);
        }
    }



    /**
     * Obtiene los datos para el mapa qlo
     */
    @CrossOrigin
    @RequestMapping(value = "/datos", method = RequestMethod.GET)
    @ResponseBody
    public ArrayList<Map> getDatos() {
    	ArrayList<Map> resultado = new ArrayList<>();
        Lucene luca = new Lucene();
        for(int i = 0; i < 14;i++) {
        	ArrayList<Integer> region = new ArrayList<Integer>();
        	region = luca.RegionSearch(regionesNombres[i]);
            Map<String, Object> result = new HashMap<String, Object>(2);
            result.put("poblacion", region.get(0));
            result.put("porcentaje", region.get(1));
            resultado.add(result);
        }
        return resultado;
    }
}